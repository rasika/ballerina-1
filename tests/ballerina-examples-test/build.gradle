/*
 * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

apply plugin: "base"


description = 'Ballerina - Examples Test'

import org.apache.tools.ant.taskdefs.condition.Os
import groovy.json.JsonSlurper


configurations {
    ballerinaTools
}

dependencies {
    ballerinaTools project(path: ':jballerina-tools', configuration: 'unzipped')
}

task copyDistribution() {
    dependsOn ":jballerina-tools:build"
    doFirst {
        copy {
            from file(configurations.ballerinaTools.asPath)
            into "$buildDir/extractedDistribution"
        }
    }
}

task test {
    dependsOn copyDistribution
    def distPath = "$buildDir/extractedDistribution"
    def bbeList = []

    mustRunAfter ':jballerina-integration-test:test'
    outputs.dir("${distPath}/examples/target")
    outputs.dir("${distPath}/examples/.ballerina/repo/")
    outputs.cacheIf { true }

    PatternSet patternSet = new PatternSet();
    patternSet.exclude("**/.ballerina/**");
    patternSet.exclude("**/Ballerina.toml");
    patternSet.exclude("**/Ballerina.lock");
    patternSet.exclude("**/ballerina-internal.log")
    inputs.files(files("${distPath}/examples").asFileTree.matching(patternSet))
    def ignoreList = [
            'proto-to-ballerina',
            'swagger-to-ballerina',
            'taint-checking',
            'websub-hub-client-sample',
            'websub-remote-hub-sample',
            'config-api',
            'testerina-function-mocks',
            'jdbc-client-crud-operations',
            'jdbc-client-batch-update',
            'jdbc-client-call-procedures',
            'streaming-big-dataset',
            'docker-deployment',
            'kubernetes-deployment',
            'knative-deployment',
            'awslambda-deployment',
            'openshift-deployment',
            'grpc-server-streaming',
            'transactions-distributed',
            'local-transactions',
            'local-transactions-with-participants',
            'xa-transactions',
            'secured-client-with-oauth2',
            'gauge-metrics',
            'counter-metrics',
            'openapi-to-ballerina',
            'kafka_message_consumer_group_service',
            'kafka_message_consumer_simple',
            'kafka_message_consumer_service',
            'kafka_message_producer',
            'kafka_message_producer_transactional',
            'grpc-secured-unary',
            'grpc-bidirectional-streaming',
            'grpc-client-streaming',
            'grpc-unary-non-blocking',
            'grpc-unary-blocking',
            'testerina-guarantee-test-execution-order',
            'testerina-data-driven-tests',
            'testerina-before-and-after-suite',
            'testerina-before-each-test',
            'testerina-before-and-after-test',
            'testerina-assertions',
            'taint-checking',
            'secured-service-with-basic-auth',
            'secured-service-with-jwt-auth',
            'secured-client-with-basic-auth',
            'secured-client-with-jwt-auth',
            'http-caching-client',
            'http-data-binding',
            'http-1.1-to-2.0-protocol-switch',
            'http-to-websocket-upgrade',
            'basic-https-listener-client',
            'https-listener',
            'http-client-endpoint',
            'http-redirects',
            'http-2.0-server-push',
            'websocket-basic-sample',
            'websocket-proxy-server',
            'websocket-failover',
            'websocket-chat-application',
            'response-with-multiparts',
            'tracing',
            'log-api',
            'the-main-function',
            'task-scheduler-appointment',
            'task-scheduler-timer',
            'time',
            'crypto',
            'xml-functions',
            'xml-access',
            'header-based-routing',
            'mutual-ssl',
            'tuple-match-statement',
            'type-conversion',
            'filepath',
            'record-io',
            'csv-io',
            'type-cast',
            'async',
            'json-csv',
            'worker-interaction',
            'fork-variable-access',
            'functional-iteration',
            'table',
            'maps',
            'cache',
            'send-and-receive-emails',
            'xml-attributes',
            'xml-literal',
            'xml',
            'json-to-xml-conversion',
            'length',
            'foreach',
            'testerina-group-tests'
    ]
    doFirst {
        exec {
            //Initialize Ballerina project
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                //TODO: Need to verify with windows
                workingDir "${buildDir}/"
                commandLine 'cmd', '/c', "${distPath}/bin/ballerina.bat", 'new', 'TestProject'
            } else {
                workingDir "${buildDir}/"
                commandLine "${distPath}/bin/./ballerina", 'new', 'TestProject'
            }
        }
        def inputFile = new File("${distPath}/examples/index.json")
        def categories = new JsonSlurper().parseText(inputFile.text)
        categories.each { category ->
            def examples = category.samples
            examples.each { example ->
                def folder = new File("${distPath}/examples/${example.url}")
                if (folder.exists()) {
                    bbeList.push("$example.url")
                }
            }
        }
        def src = "${project.rootDir}/examples/"
        def dis = "${buildDir}/TestProject/src/"
        copy {
            from(src)
            into dis
        }
    }
    doLast {
        ignoreList.each { String elements ->
            bbeList.remove("$elements")
        }
        bbeList.each { String bbe ->
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                //TODO: Need to verify with windows
                exec {
                    workingDir "${buildDir}/TestProject"
                    commandLine 'cmd', '/c', "${distPath}/bin/ballerina.bat", 'build', '--experimental', "${bbe}"
                }
            } else {
                exec {
                    workingDir "${buildDir}/TestProject"
                    commandLine "${buildDir}/extractedDistribution/bin/./ballerina", 'build', '--experimental', "${bbe}"
                }
            }
        }
    }
}

build {
    dependsOn test
}
