import ballerina/grpc;

{{#if enableEp}}listener grpc:Listener ep = new (9090);{{/if}}
{{#if bidiStreaming}}
@grpc:ServiceConfig {
    name: "{{serviceName}}",
    clientStreaming: true,
    serverStreaming: true
}{{/if}}{{#if clientStreaming}}
@grpc:ServiceConfig {
    name: "{{serviceName}}",
    clientStreaming: true
}
{{/if}}
service {{serviceName}} on ep {
{{#streamingFunction}}
    resource function onOpen(grpc:Caller caller) {
        // Implementation goes here.
    }

    resource function onMessage(grpc:Caller caller{{#isNotNull inputType}}, {{inputType}} value{{/isNotNull}}) {
        // Implementation goes here.
    }

    resource function onError(grpc:Caller caller, error err) {
        // Implementation goes here.
    }

    resource function onComplete(grpc:Caller caller) {
            // Implementation goes here.
            // You should return a {{outputType}}
    }
{{/streamingFunction}}{{#unaryFunctions}}{{#equals methodType "SERVER_STREAMING"}}
    @grpc:ResourceConfig { streaming: true } {{/equals}}
    resource function {{methodName}}(grpc:Caller caller{{#isNotNull inputType}}, {{inputType}} value{{/isNotNull}}) {
        // Implementation goes here.

        // You should return a {{outputType}}
    }{{/unaryFunctions}}
}

{{#each messageMap}}{{> message}}{{/each}}
{{#enumList}}{{> enum}}{{/enumList}}{{#if rootDescriptor}}
const string ROOT_DESCRIPTOR = "{{rootDescriptor}}";
function getDescriptorMap() returns map<string> {
    return {
        {{#each descriptors}}"{{descriptorKey}}":"{{descriptorData}}"{{#unless @last}},{{/unless}}
        {{/each}}
    };
}{{/if}}
