    {{#not_equal httpMethod "PATTERN_NOT_SET"}}@http:ResourceConfig {
    methods: ["{{httpMethod}}"],
    path: "{{httpPath}}"{{#not_equal httpBody ""}},
    body: "requestBody"{{/not_equal}}
    }
    resource function {{methodName}}(http:Caller caller, http:Request req{{#paramSet}}{{#equals paramSource "path"}}, {{fieldType}} {{fieldName}}{{/equals}}{{/paramSet}}{{#not_equal httpBody ""}}, json requestBody{{/not_equal}}) {
        {{#isNotNull inputType}}{{#if primitiveInput}}{{inputType}} new{{inputType}};{{else}}{{inputType}} new{{inputType}} = {};{{/if}}
        {{#equals httpBody "*"}}{{inputType}} | error bodyExtracted{{inputType}} = {{inputType}}.constructFrom(requestBody);
        if bodyExtracted{{inputType}} is error {
            sendResponse(caller, bodyExtracted{{inputType}});
            return;
        } else {
        {{#if primitiveInput}}new{{inputType}}{{else}}new{{inputType}}{{/if}} = bodyExtracted{{inputType}};
        }
        {{#paramSet}}{{#equals paramSource "path"}}{{#if ../primitiveInput}}new{{../inputType}}{{else}}{{parentName}}.{{fieldName}}{{/if}} = {{fieldName}};
        {{/equals}}{{/paramSet}}{{/equals}}{{#not_equal httpBody "*"}}{{#paramSet}}{{#equals paramSource "message"}}{{fieldType}} {{fieldName}} = {};
        {{/equals}}{{/paramSet}}any | error paramReader;
        string[]? queryParamSetReader;
        {{#paramSet}}{{#equals paramSource "path"}}{{#if ../primitiveInput}}new{{../inputType}}{{else}}{{parentName}}.{{fieldName}}{{/if}} = {{fieldName}};
        {{/equals}}{{#equals paramSource "query"}}{{#if repeatedParam}}queryParamSetReader = req.getQueryParamValues("{{queryAccessName}}{{fieldName}}");
        if queryParamSetReader is string[] {
            paramReader = arrayCaster(queryParamSetReader, "{{fieldType}}");
            if paramReader is {{fieldType}}[] {
                {{parentName}}.{{fieldName}} = paramReader;
            } else {
                sendResponse(caller, paramReader);
                return;
            }
        }{{else}}paramReader = castFunction(req.getQueryParamValue("{{queryAccessName}}{{fieldName}}"), "{{fieldType}}");
        if paramReader is {{fieldType}} {
            {{#if ../primitiveInput}}new{{../inputType}}{{else}}{{parentName}}.{{fieldName}}{{/if}} = paramReader;
        } else {
            sendResponse(caller, paramReader);
            return;
        }{{/if}}
        {{/equals}}{{#equals paramSource "body"}}{{fieldType}} | error {{fieldName}} = {{fieldType}}.constructFrom(requestBody);
        if {{fieldName}} is {{fieldType}} {
            {{#if ../primitiveInput}}new{{../inputType}}{{else}}{{parentName}}.{{fieldName}}{{/if}} = {{fieldName}};
        } else {
            sendResponse(caller, {{fieldName}});
            return;
        }
        {{/equals}}{{#equals paramSource "message"}}{{parentName}}.{{fieldName}} = {{fieldName}};
        {{/equals}}{{/paramSet}}{{/not_equal}}var response = {{service}}BlockingEp ->{{methodName}}(new{{inputType}});{{/isNotNull}}{{#isNull inputType}}var response = {{service}}BlockingEp ->{{methodName}}();{{/isNull}}
        sendResponse(caller, response);
        return;
    }{{/not_equal}}
